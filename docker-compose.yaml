services:
  user:
    build:
      context: .
      dockerfile: ./apps/user/Dockerfile
      target: development
    command: pnpm start:dev user
    depends_on:
      postgres_user:
        condition: service_healthy
    ports:
      - '3001:3001'
    volumes:
      - .:/app
      - /app/node_modules
    env_file:
      - ./apps/user/.env

  postgres_user:
    image: postgres:17-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
      PGPORT: 5432
    ports:
      - '5432:5432'
    volumes:
      - ./docker-volumes/postgres/user:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres -p 5432']
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 5s

  product:
    build:
      context: .
      dockerfile: ./apps/product/Dockerfile
      target: development
    command: pnpm run start:dev product
    depends_on:
      postgres_product:
        condition: service_healthy
    env_file:
      - ./apps/product/.env
    ports:
      - '3002:3002'
    volumes:
      - .:/app
      - /app/node_modules

  postgres_product:
    image: postgres:17-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
      PGPORT: 5433
    ports:
      - '5433:5433'
    volumes:
      - ./docker-volumes/postgres/product:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres -p 5433']
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 5s

  order:
    build:
      context: .
      dockerfile: ./apps/order/Dockerfile
      target: development
    command: pnpm run start:dev order
    depends_on:
      mongo_order:
        condition: service_healthy
    env_file:
      - ./apps/order/.env
    ports:
      - '3003:3003'
    volumes:
      - .:/app
      - /app/node_modules

  mongo_order:
    image: mongo:8
    environment:
      MONGO_INITDB_ROOT_USERNAME: mongo
      MONGO_INITDB_ROOT_PASSWORD: mongo
    ports:
      - '27017:27017'
    volumes:
      - ./docker-volumes/mongo/order:/data/db
    command: mongod --quiet --logpath /dev/null
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 5s

  payment:
    build:
      context: .
      dockerfile: ./apps/product/Dockerfile
      target: development
    command: pnpm run start:dev payment
    depends_on:
      postgres_payment:
        condition: service_healthy
    env_file:
      - ./apps/payment/.env
    ports:
      - '3004:3004'
    volumes:
      - .:/app
      - /app/node_modules

  postgres_payment:
    image: postgres:17-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
      PGPORT: 5434
    ports:
      - '5434:5434'
    volumes:
      - ./docker-volumes/postgres/payment:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres -p 5434']
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 5s

  notification:
    build:
      context: .
      dockerfile: ./apps/notification/Dockerfile
      target: development
    command: pnpm run start:dev notification
    depends_on:
      mongo_notification:
        condition: service_healthy
    env_file:
      - ./apps/notification/.env
    ports:
      - '3005:3005'
    volumes:
      - .:/app
      - /app/node_modules

  mongo_notification:
    image: mongo:8
    environment:
      MONGO_INITDB_ROOT_USERNAME: mongo
      MONGO_INITDB_ROOT_PASSWORD: mongo
    ports:
      - '27018:27018'
    volumes:
      - ./docker-volumes/mongo/notification:/data/db
    command: mongod --port 27018 --quiet --logpath /dev/null
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27018/test --quiet
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 5s
