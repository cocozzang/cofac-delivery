// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v5.29.3
// source: proto/user.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "user";

export interface ParseBearerTokenRequest {
  token: string;
}

export interface ParseBearerTokenResponse {
  sub: string;
  type: string;
}

export interface RegisterUserRequest {
  token: string;
  name: string;
  age: number;
  profile: string;
}

export interface RegisterUserResponse {
  id: string;
  email: string;
  name: string;
  age: number;
  profile: string;
}

export interface LoginUserRequest {
  token: string;
}

export interface LoginUserResponse {
  accessToken: string;
  refreshToken: string;
}

export interface GetUserInfoRequest {
  userId: string;
}

export interface GetUserInfoResponse {
  id: string;
  email: string;
  name: string;
  age: number;
  profile: string;
}

export const USER_PACKAGE_NAME = "user";

export interface AuthServiceClient {
  parseBearerToken(request: ParseBearerTokenRequest): Observable<ParseBearerTokenResponse>;

  registerUser(request: RegisterUserRequest): Observable<RegisterUserResponse>;

  loginUser(request: LoginUserRequest): Observable<LoginUserResponse>;
}

export interface AuthServiceController {
  parseBearerToken(
    request: ParseBearerTokenRequest,
  ): Promise<ParseBearerTokenResponse> | Observable<ParseBearerTokenResponse> | ParseBearerTokenResponse;

  registerUser(
    request: RegisterUserRequest,
  ): Promise<RegisterUserResponse> | Observable<RegisterUserResponse> | RegisterUserResponse;

  loginUser(request: LoginUserRequest): Promise<LoginUserResponse> | Observable<LoginUserResponse> | LoginUserResponse;
}

export function AuthServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["parseBearerToken", "registerUser", "loginUser"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const AUTH_SERVICE_NAME = "AuthService";

export interface UserServiceClient {
  getUserinfo(request: GetUserInfoRequest): Observable<GetUserInfoResponse>;
}

export interface UserServiceController {
  getUserinfo(
    request: GetUserInfoRequest,
  ): Promise<GetUserInfoResponse> | Observable<GetUserInfoResponse> | GetUserInfoResponse;
}

export function UserServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["getUserinfo"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const USER_SERVICE_NAME = "UserService";
